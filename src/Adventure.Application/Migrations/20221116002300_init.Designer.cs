// <auto-generated />
using System;
using Adventure.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Adventure.Application.Migrations
{
    [DbContext(typeof(AdventureDbContext))]
    [Migration("20221116002300_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Adventure.Domain.DomainModels.AdventureAggregate.Adventure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(5940), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(6250), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.HasKey("Id");

                    b.ToTable("Adventure", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4065), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            Name = "Doughnut Selection",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4065), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Adventure.Domain.DomainModels.AdventureAggregate.AdventureSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("AdventureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Code")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(8497), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte?>("ParentCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(8819), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("AdventureSelection", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("75205189-e254-4a13-b9a7-2468877b5532"),
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)0,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4173), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            Text = "DO I WANT A DOUGHNUT?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4191), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("10dcb061-2385-407c-8f39-dcd7ca8920bf"),
                            Action = "Yes",
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)1,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4212), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            ParentCode = (byte)0,
                            Text = "Do I deserve it?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4212), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("fa1d2064-be94-4445-888d-20b1fd4b374e"),
                            Action = "No",
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)2,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4220), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            ParentCode = (byte)0,
                            Text = "Maybe you want an apple?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4221), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("02217c64-168e-46fa-996a-0b6225485fb2"),
                            Action = "Yes",
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)3,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4227), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            ParentCode = (byte)1,
                            Text = "Are you sure?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4228), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("35c84599-bdcf-4e0f-a18d-2103adaff2bb"),
                            Action = "No",
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)4,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4235), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            ParentCode = (byte)1,
                            Text = "Is it a good doughnut?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4235), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("ac9d797b-6609-42b6-9943-4dc88fc91670"),
                            Action = "Yes",
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)5,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4254), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            ParentCode = (byte)3,
                            Text = "Get it.",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4254), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("e86a9439-366c-4875-b49f-e3b63c3ad32a"),
                            Action = "No",
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)6,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4264), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            ParentCode = (byte)3,
                            Text = "Do jumping jacks first.",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4265), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("01b4406e-8142-4d77-acbc-388bb1bbc1dd"),
                            Action = "Yes",
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)7,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4272), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            ParentCode = (byte)4,
                            Text = "What are you waiting for? Grab it now.",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4272), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("46350bf6-1b21-43ea-b46c-e67caac4c70e"),
                            Action = "No",
                            AdventureId = new Guid("3afb0c39-647a-47c2-8852-e6f9a55c7985"),
                            Code = (byte)8,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4279), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            ParentCode = (byte)4,
                            Text = "Wait 'till you find a sinful unforgettable doughnut.",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 16, 0, 23, 0, 559, DateTimeKind.Unspecified).AddTicks(4279), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Adventure.Domain.DomainModels.UserSelectionAggregate.UserAdventureSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdventureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 560, DateTimeKind.Unspecified).AddTicks(430), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 560, DateTimeKind.Unspecified).AddTicks(746), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserAdventureSelection", (string)null);
                });

            modelBuilder.Entity("Adventure.Domain.DomainModels.UserSelectionAggregate.UserAdventureStepsSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdventureSelectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 560, DateTimeKind.Unspecified).AddTicks(1623), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte>("Step")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 11, 16, 0, 23, 0, 560, DateTimeKind.Unspecified).AddTicks(1911), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("System");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSelectionId");

                    b.ToTable("UserAdventureStepsSelection", (string)null);
                });

            modelBuilder.Entity("Adventure.Domain.DomainModels.AdventureAggregate.AdventureSelection", b =>
                {
                    b.HasOne("Adventure.Domain.DomainModels.AdventureAggregate.Adventure", "Adventure")
                        .WithMany("Choices")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("Adventure.Domain.DomainModels.UserSelectionAggregate.UserAdventureStepsSelection", b =>
                {
                    b.HasOne("Adventure.Domain.DomainModels.UserSelectionAggregate.UserAdventureSelection", "AdventureSelection")
                        .WithMany("Steps")
                        .HasForeignKey("AdventureSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventureSelection");
                });

            modelBuilder.Entity("Adventure.Domain.DomainModels.AdventureAggregate.Adventure", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Adventure.Domain.DomainModels.UserSelectionAggregate.UserAdventureSelection", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
